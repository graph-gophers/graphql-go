// Code generated by go-bindata.
// sources:
// meta.graphql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _metaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x5b\x6f\x1b\xb9\x15\x7e\xd7\xaf\x38\x8e\x1f\x1a\x03\xf2\x18\xdb\xa6\x68\xe1\x62\x81\x2a\xb1\x9c\x9d\xad\x23\x67\x6d\x2b\x45\x11\xa4\x12\x35\x73\x46\xc3\x35\x45\x4e\x48\x8e\x15\x21\xbb\xff\xbd\x38\x24\x87\x33\x1a\x5d\x9c\xa0\xfb\x92\x58\x43\x9e\xef\xdc\x6f\x3c\x85\x87\x12\x61\x9e\x4a\x3b\x07\x93\x31\xc1\x34\xd8\x4d\x85\xa0\xb1\xd2\x68\x50\x5a\x03\x52\xc9\xf3\x42\xb3\xcc\x72\x25\x99\x00\xc3\x97\x12\x73\x58\x97\x4a\x20\xc8\x7a\x85\x9a\x67\xf0\xc4\x44\x8d\x26\x81\x54\x5a\xc8\x98\x6c\xc9\xc3\x09\x2c\xd0\xae\x11\x25\x9c\xbf\xfc\xf3\x7f\xff\xf2\xc3\x19\x30\x99\x03\xfd\x05\xe7\xf0\x43\x32\x08\x9c\x53\x69\x07\x83\x20\xd1\xb5\x50\xec\xb0\x4c\x41\x88\x5c\xd5\x0b\x81\xe7\x95\xc6\x8c\x1b\xae\x24\x74\xe4\x0c\x8c\x99\x01\x53\x61\xc6\x0b\x8e\x39\x2c\x36\xf0\x31\x1d\x8f\xc7\xf0\xb7\xbf\xbe\xfa\xf4\xb2\xb4\xb6\xba\xbc\xb8\x40\x99\xac\xf9\x23\xaf\x30\xe7\x2c\x51\x7a\x79\x41\xbf\x2e\xe8\xda\xac\x20\x21\xb8\x5c\xce\x2a\xc5\xa5\x3d\x8b\x82\x3a\xe1\xa2\xa8\xf7\x56\x73\xb9\x3c\x28\xab\xc5\x2f\xb6\x66\x02\x72\x66\xd9\xb0\x3d\xc0\x9c\x64\x9b\x3e\x5c\x9f\xff\x1d\xb2\x92\x91\xe0\xa8\xc1\xe0\xe7\x1a\x65\x46\xb6\x24\x6c\x0f\xed\x21\xb9\x81\x95\x32\x16\x54\x61\x51\x42\x6d\xbc\x3e\x6f\x35\xab\xca\x5f\x6e\xc0\xaa\x8e\xd1\x0b\x8d\x78\x5e\x28\xbd\x82\xb2\x5e\x31\x79\xae\x91\xe5\x6c\x21\xd0\xc9\x12\xb5\xf0\xe0\x51\x8d\xd7\x4a\x09\x64\xf2\xa0\x1e\x73\xab\x6b\x9c\x83\xd2\x30\x2f\x98\x30\x38\x8f\x40\x81\x32\x22\xa5\x57\x07\x41\x18\xd4\x92\x7f\xae\x11\x78\x8e\xd2\x92\x57\xf4\xb0\xab\x91\x53\xa3\x40\x9b\x95\xc0\x24\xa8\xc5\xaf\x98\x59\x62\xc9\x0c\x3c\xe2\x06\x0a\xfa\x13\x32\x96\x95\xe8\x0d\x94\x5e\x79\x16\xac\xaa\x90\x69\x03\x5c\x02\x83\x9f\xef\x6f\x27\xa0\xd1\x54\x4a\x1a\x24\x52\x16\x74\xfd\x07\x94\x6a\x8d\x4f\xc4\x93\x5b\x32\xa8\x54\x16\xb8\xb4\x28\x73\xcf\x7b\x81\x3d\x8b\x25\xf0\xef\x12\x25\xe0\x97\x0a\xb3\xe0\x32\x26\x81\xcb\xaa\xb6\x8e\xf1\x10\x98\xdc\x80\xf1\x6e\x7a\x69\x6a\x92\xdb\xc0\xfc\xc5\xab\x17\xf3\x33\x92\x9b\xc0\x97\xa8\x3b\x47\xaf\xe6\x67\x81\xde\x45\x28\xac\xb9\x10\xc4\x97\x65\x19\x56\x2d\x8b\xf4\xaa\x4d\x8b\x2b\xb2\xec\x15\xd7\x98\x51\x38\x95\x08\xf8\x05\xb3\xda\x2a\x4d\x22\x73\x99\x89\x3a\x47\xb0\x25\x37\x50\x70\x14\x39\xf1\x2d\x34\x5b\xae\x28\x14\x94\x14\x1b\x58\x93\x0e\x44\x38\xe7\xc5\x1c\x98\x5e\xd6\xee\x8c\x1b\x20\x9f\x26\x83\xdc\x61\xf3\x27\x84\x7f\x06\xb8\x97\x03\x00\x80\x53\x48\xfd\xcf\x3c\x40\xb8\xdb\x74\xc2\x8b\xcb\xc6\xed\x27\x83\x33\x50\x12\xae\xd3\xf1\xcd\x15\xfc\x06\xd7\x77\xa3\xb7\xef\xc6\x93\x87\xd9\xfd\xfb\xbb\xf1\x88\xbe\xa4\x93\x9b\x74\x32\x9e\x35\x07\xc7\x94\x31\x8f\xbc\x3a\xa4\xc9\x77\x28\x41\x30\x8d\x06\xf7\x8f\xbc\xaa\xfe\x70\x05\xde\x31\xfd\xe8\xfc\x84\x02\xbd\x9d\x0b\x60\x31\x19\x4d\x56\xe2\x8a\x91\x27\xa5\x02\xa1\x24\x45\x80\xa9\xab\x4a\x69\x8b\xf9\x96\xa4\x39\xa5\x46\xc6\x2c\xe6\x8d\xbc\xe3\x2f\x95\x60\x5c\x1a\x58\x97\x1b\x6f\x8a\x86\xc5\x9a\x19\x68\xef\x0f\xa1\x36\x35\x13\x62\x03\x4c\x98\x26\x0c\x28\x0a\x19\x98\x7a\xb9\x44\x43\x75\x30\x60\x52\xda\x94\x6a\x4d\x16\xa6\x30\x33\xa6\x95\x06\x0c\x5f\x71\x8a\x32\x2a\x4f\x09\x5c\x2b\xbd\x62\x96\xbe\xf3\x86\xf8\x23\xe9\x9a\xab\xb5\xf4\x15\xd3\x5c\x5e\x5c\xe4\x8c\xe2\xbd\xe0\x1a\x17\x4c\x88\x44\xa2\xbd\xa8\xb4\xa2\x5c\x35\x17\xab\x70\xfb\xe2\xcc\x1b\x5a\x23\x33\x4a\x5e\x36\xa5\xec\x47\x78\x31\xd9\xb5\xc9\x8b\x8e\x0b\x66\x57\xe3\xeb\x74\x92\x3e\xa4\xb7\x13\xf8\x0d\xc6\x93\xe9\xbb\xd9\x87\xd1\xcd\x74\x4c\x66\x1f\x85\xc8\x21\xdb\x55\x5a\x3d\xf1\x9c\x4a\x3c\xac\xd9\x86\x74\xcb\xd1\x64\x9a\x53\x2e\x09\x8b\x5a\x32\x8b\xa0\x6b\x69\xf9\xaa\x09\x32\x6a\x11\xd4\x79\x5c\xc9\x78\x62\x82\xe7\xcc\x7d\x5b\x60\xc9\x9e\xb8\x4b\xd7\x8e\x17\x73\x95\xb9\x10\x4b\x06\xa7\x03\xca\x04\x30\x6a\x85\x90\x31\x83\x66\x08\x1b\x55\x83\x44\x5f\x35\x82\x24\xa0\x2a\x42\x33\xce\xcc\x24\x41\x83\xf4\x27\xd3\xe1\xdf\xf0\x1a\x9c\x12\xb7\x35\xdb\x34\xb1\xde\x44\xb4\xf1\x25\x81\x4a\x93\xa9\x8b\x82\x67\x38\x84\xa6\x7a\x64\x4a\xe6\xdc\x37\x38\xb1\xe9\xf8\xdc\xc1\x51\xd4\x57\x3e\x02\x1c\x62\xd2\x1a\xcb\x44\x19\x5d\x44\x2d\x36\x8d\xad\xdc\xf5\xbc\xc1\x04\x2e\x0b\x17\x00\x14\x3a\xa7\xa4\x47\x37\x41\x93\x81\xb3\xdb\x6c\xd6\xfa\xe0\xab\x73\xb1\x64\x2b\x6c\x1c\x7c\xe2\xbe\x78\x74\x67\x8e\xe6\xc0\x7d\x17\x2a\x73\xe0\xe6\x12\x3e\x76\x70\x6e\xc2\xe7\x93\x4f\x9e\x9c\xe9\xa5\xbf\x91\x52\xa1\xfc\x40\x75\x92\x8e\x7e\xef\x87\x00\x8d\x1a\xe4\xee\xfc\x57\x96\x51\x86\x58\x05\x2b\xaa\xc7\x15\xd3\xd6\x50\x4a\x92\xf8\x8d\x3b\x05\x93\xcb\x9a\x2d\xa9\x64\x0f\x4e\x61\x0f\xf7\x18\x3f\x06\x94\x44\x6f\xf3\x4a\x19\xc3\xa9\x73\x06\x1e\x19\x47\x93\x0c\x50\xd6\xab\xbd\x08\x5f\x43\xce\xc4\x0f\x5d\xd1\x18\x7c\xae\x51\x6f\x40\x55\xa8\xdd\xa9\x4f\x90\x5f\xa6\xe3\xbb\xff\x1c\xa7\x5b\xd5\xd6\x7f\xee\x91\xbe\x9b\x3e\x8c\x28\x4f\x8e\x53\x9b\x7a\x11\xbd\xd1\x47\xb8\x9f\xbe\xbe\x7f\x73\x97\xbe\x7f\x1e\xc5\x87\x94\xbb\xe3\xd2\xf4\x99\xdb\x4d\xd5\xce\xb1\xe0\x92\xb7\x0c\x63\x75\x6d\xb3\xfc\x1b\x91\x4c\x45\x4d\xb9\x87\xe2\x6b\xf4\x51\x04\x6a\xd7\x82\x4b\x8c\x48\x1e\xa2\x5f\xd4\x8f\x9b\xd0\x17\xf4\xbe\x32\xf7\x6f\x7e\x1a\xbf\x1b\x3d\x47\xea\x9a\xf8\x2e\xe9\xe8\x66\x74\xf7\x8c\xe0\x61\xfe\x71\x69\xd7\x07\xb8\x7d\xfd\xf3\xf8\xcd\x33\x62\xfb\xc2\xb2\xe3\x82\x5e\x95\x7d\x46\x88\xd8\x69\xfb\x38\xa3\xbb\xb7\xd3\xef\x71\xa5\x74\xd3\x90\x2e\x58\xb6\xab\x4d\x3a\x79\x18\xdf\x5d\x8f\xde\x8c\x8f\x2b\x54\x4b\x9f\xa7\xdb\xc4\xd3\xc9\xf3\xac\x5d\xca\xf6\x09\xa9\xb9\x7c\x0b\x9d\x9f\xd4\xf6\x51\x87\xd6\xf4\x9c\xda\x34\xee\x1d\x73\x66\x3a\x79\x3f\x7d\x98\x7d\x83\x4b\x7b\x60\xfb\x1d\xec\xd1\x76\xdc\xec\xca\xe7\xad\xc4\xb6\xa8\x79\xbd\xfc\x50\xbd\xe4\x4f\x28\x61\x2c\xeb\x55\xe2\xfe\x8d\x0b\x94\xc6\x66\x66\xf7\x5f\x86\xae\x35\x51\x0d\xad\x04\xcb\xb0\x54\x22\x47\x1d\x40\xc2\x20\xac\xf4\xf6\x66\x98\xc0\x4f\x7e\xee\x26\x05\x5a\x70\x9a\xdd\x34\xda\x5a\x4b\x3f\x6f\x9c\xee\x9f\xdd\x3d\x68\xec\x3e\x44\xef\x5a\xc2\x77\x77\x1f\x6e\xae\xe2\xf8\xd4\x99\xfe\x3c\x89\x3f\xe0\x4a\xde\x6d\x0d\x2c\xc1\x6a\xde\xdc\x34\x3b\xa4\x31\x86\x49\x1e\x6f\x9f\xa6\x71\xb8\x8d\x8c\x81\xe0\x6e\x4d\x83\x6b\xf2\x8e\x19\x02\xb2\xac\xa4\xdf\xeb\x92\x67\x25\x94\xcc\x38\x4d\x49\xee\x21\x54\xca\xd2\x22\xe4\x07\xb9\x48\x19\x67\x81\xa1\xe3\xc9\x82\x99\x1c\xcb\x68\x08\x07\xff\xdd\x46\x38\xd0\x5b\xe9\x88\x70\x2f\x61\x36\x7b\xd8\x54\x78\xf2\x7f\x5a\x6c\x14\xa7\x99\x30\x79\xb8\x49\xc9\x5b\x84\xe2\xa3\x33\x9a\xb8\x89\xac\xc4\x10\xd9\x45\xb8\x52\x00\x93\x6e\xec\xaa\x6a\xdb\x98\x5f\x63\x7f\x7f\x76\xc7\xf0\xc1\x87\xaa\xb7\x6f\x9c\x02\x6d\x89\x3c\x6c\xa0\x4c\xe6\x83\xd3\x30\x9f\x05\x53\xe7\x58\xb0\x5a\x84\x2d\x2c\xda\xb4\x35\xca\x77\x1b\x76\xd7\x7a\x34\xac\x84\xe9\xe3\xbc\x88\x83\x75\xc8\x91\xa8\x88\x5b\xf0\x4b\xdc\x16\xc8\xe5\x93\x9b\xd5\x3a\xbb\x62\x12\xf8\xbb\x7b\x4e\xc8\x9e\xcd\xe3\xac\x73\xdf\xe9\x57\xe8\xd7\xac\x8c\x55\x6c\xc1\x05\xb7\x1c\x4d\x6f\x5b\x41\xfd\x84\x3a\x81\xd4\xd2\x9e\xab\x0c\xb9\x44\x08\x8a\xd1\x27\xc6\x85\x7f\x37\xf0\xa1\x2e\x73\xc8\x5b\xbf\x29\xbf\x8e\x79\xf2\x21\x79\x63\x8d\x42\xd0\xff\x6e\x6a\x94\x56\x6f\xc0\x3d\x9c\x18\xd2\x66\x70\xea\xc7\x9f\x61\x9c\x66\x7c\x6c\xef\x9f\x4e\x4c\xf4\x48\x50\xe5\x6b\xb4\x68\xcc\x11\x21\x82\x5c\xed\x32\xb3\x08\x2b\x53\x50\x29\xfa\xc5\x47\xbc\xf3\xcc\xa7\xc6\x37\x0f\xa5\xd7\x0b\x6c\xc9\x6c\x7f\x34\x33\x71\x2f\xd7\x4a\xb9\x58\x0b\x63\x83\xbb\xf7\xb0\xc7\xd5\x69\xd1\x65\xdd\xc8\x64\x3a\xda\xda\x2d\x86\xbb\x33\xdd\x41\x9e\xcd\xd5\x2e\xdb\xa3\x5c\xb7\x8c\xda\x67\x7c\xc0\xe0\x87\x98\x77\xaf\xef\x11\x60\xdb\x1f\x9d\xe8\x38\xee\x94\xf6\xe2\xf6\x26\x10\xc7\x7c\xf2\x4e\x51\xcb\x9c\x51\x11\x61\x82\x5a\x90\xe7\x22\x37\xfd\x28\xe7\x26\x6a\xe8\x1e\x85\x34\xba\x4a\xe1\x36\x81\x47\x2e\x5d\x31\xa1\x6d\xc6\xc5\x0a\x97\x91\x9c\x99\xad\x6a\xe2\xc4\x44\x98\x7b\xf5\xfe\xc5\x65\x3e\x77\xdd\xdf\xaf\x7f\x57\x58\xa1\xf4\xbb\x96\x0f\x7b\x42\xf6\x79\xe4\xdf\x81\x32\xd4\x96\x71\xd9\xd4\xaf\x58\x85\x3a\x2b\x15\xb0\x85\xaa\xad\xf3\x42\x90\x27\x81\xfb\xf6\x9d\xac\x5d\xd2\xa4\xda\x22\x5b\xe0\x46\xb9\x2e\x40\xc5\xc8\x67\x21\x76\xdc\xbb\x2e\xb9\xc0\xc1\xa9\x6f\xac\xdb\x40\xbe\x04\x36\xaf\xb3\x47\xba\x58\x87\x20\x68\x40\x12\x96\x18\x17\x45\x4c\x60\xb4\x30\x56\xb3\x30\xc2\x98\x21\x4c\x65\xb3\x4f\x47\xb4\xe1\x16\xd0\x6d\x3b\xf1\x10\x5c\xbb\x4b\xd9\x66\x2f\x4f\xe0\x86\xa2\x87\x30\x26\x4a\x4e\xea\x98\xd2\x99\x5a\x51\x25\x02\x65\x4b\x0c\xd6\x89\x15\x81\xdc\x13\xea\x01\x39\xa1\x09\x48\xf2\xd8\xc9\x4e\xcd\x3e\x5a\xb2\xbd\xa6\x2f\xc3\x9b\xd7\x9e\x56\x07\x3f\x82\x7b\xeb\x3c\x73\x51\xea\xba\xd7\xc9\x27\xdf\x19\x1b\x95\xbb\xa5\xc5\x9d\x34\x6a\x3e\xf4\xea\x8e\x3b\xc4\x66\x78\xf9\x76\xae\x71\xde\x89\x9c\xab\xda\xfa\x46\xba\xd3\xc7\xdd\x05\x55\x6c\xe5\xa9\x6f\x0d\x71\x02\x8e\x6b\xff\x9a\x8a\x41\x13\xc5\xbe\x4b\x86\x21\x30\xa4\xc0\x1c\x78\xbb\xeb\x36\x16\x8e\x85\x38\x95\x39\x27\xb1\x8d\x4f\xee\xe6\x89\xba\x59\x78\xf6\x6c\x39\x87\x28\x9a\x3d\x27\x81\xb9\x77\xc8\xdc\x05\xc4\xbc\x35\xf1\xdc\x25\xb4\x7b\xb0\x09\x3e\xdb\xb3\x03\x1d\x86\x8f\x40\x7d\x0e\x5b\xae\x3a\xc4\xa4\xbf\x9a\x1c\x54\xdc\x2d\x27\xc9\x0e\xaa\x3b\xeb\xc0\xee\xee\x2c\x87\x25\x77\xf5\x07\xe6\x6d\xd4\x1c\x82\xeb\x6c\x32\xc7\xec\xd0\xae\x0e\x09\xd9\x37\x06\xd2\x21\xd8\x3d\x7b\xc9\x41\xf5\xa9\x0f\x24\x30\xf7\xd1\x77\x08\xf0\x26\xbd\x7f\x16\x48\x2a\x79\x2e\x6b\x21\x9e\x05\x9b\xdc\x4e\x66\x93\xe9\xcd\xcd\xe0\xf7\xff\x05\x00\x00\xff\xff\x10\x4f\xc8\x2d\xc7\x1a\x00\x00")

func metaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_metaGraphql,
		"meta.graphql",
	)
}

func metaGraphql() (*asset, error) {
	bytes, err := metaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "meta.graphql", size: 6855, mode: os.FileMode(420), modTime: time.Unix(1528679384, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"meta.graphql": metaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"meta.graphql": &bintree{metaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

